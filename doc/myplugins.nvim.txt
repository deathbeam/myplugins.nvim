*myplugins.nvim.txt*        For NVIM v0.10.0        Last change: 2025 March 13

==============================================================================
Table of Contents                           *myplugins.nvim-table-of-contents*

1. myplugins.nvim                              |myplugins.nvim-myplugins.nvim|
  - Usage                                               |myplugins.nvim-usage|
  - Plugins                                           |myplugins.nvim-plugins|

==============================================================================
1. myplugins.nvim                              *myplugins.nvim-myplugins.nvim*

A collection of plugins that were at some point sitting in my dotfiles.


USAGE                                                   *myplugins.nvim-usage*

>lua
    require('myplugins').setup {
        bigfile = {},
        bufcomplete = {
            border = 'single',
        },
        signature = {
            border = 'single',
        },
        -- Etc etc, format is <plugin_name> = { <plugin_configuration> }
    }
<


PLUGINS                                               *myplugins.nvim-plugins*


BIGFILE ~

Automatically disable stuff for large files


BUFCOMPLETE ~

LSP + treesitter autocompletion

For best completion experience:

>lua
    vim.o.completeopt = 'menuone,noselect,noinsert,popup'
<

And you also ideally want to set the capabilities so Neovim will fetch
documentation when resolving completion items:

>lua
    -- Here we grab default Neovim capabilities and extend them with ones we want on top
    local capabilities = vim.tbl_deep_extend('force', 
        vim.lsp.protocol.make_client_capabilities(), 
        require('autocomplete.capabilities')
    )
    
    -- Now set capabilities on your LSP servers
    require('lspconfig')['<YOUR_LSP_SERVER>'].setup {
        capabilities = capabilities
    }
<


CMDCOMPLETE ~


  [!WARNING] Requires neovim 0.11.0+
Command-line autocompletion


DIAGNOSTICS ~

Automatically show diagnostic popup on cursor hover and disable
`DiagnosticUnnecessary` highlighting for code under cursor.


DIFFTOOL ~

`DiffTool <left> <right>` command for integration with `git difftool` and `git
difftool --dir-diff`.

Add this to your `gitconfig`:

>ini
    [diff]
        tool = nvim_difftool
    
    [difftool "nvim_difftool"]
        cmd = nvim -c \"DiffTool $LOCAL $REMOTE\"
<


LSPECHO ~

Echo LSP progress to cmdline


ROOTER ~

Automatically changes working directory to project root.


SESSION ~

Automatically saves and restores session in predefined folders (default ~/git)


SIGNATURE ~

Automatically show function signature on cursor hover in insert mode.


UNDOTREE ~

Undo tree visualization for `fzf-lua`.

Usage:

>lua
    vim.keymap.set('n', '<leader>fu', require('myplugins.undotree').show)
<


WIKI ~

Simple wiki/note-taking functionality using `fzf-lua`.

Usage:

>lua
    local wiki = require('myplugins.wiki')
    vim.keymap.set('n', '<leader>wt', wiki.today)
    vim.keymap.set('n', '<leader>wd', wiki.list_diary)
    vim.keymap.set('n', '<leader>ww', wiki.list_wiki)
    vim.keymap.set('n', '<leader>wn', wiki.new)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
