*myplugins.nvim.txt*        For NVIM v0.10.0       Last change: 2025 August 24

==============================================================================
Table of Contents                           *myplugins.nvim-table-of-contents*

  - Usage                                               |myplugins.nvim-usage|
  - bigfile                                           |myplugins.nvim-bigfile|
  - bookmarks                                       |myplugins.nvim-bookmarks|
  - bufcomplete                                   |myplugins.nvim-bufcomplete|
  - cmdcomplete                                   |myplugins.nvim-cmdcomplete|
  - diagnostics                                   |myplugins.nvim-diagnostics|
  - difftool                                         |myplugins.nvim-difftool|
  - httpyac                                           |myplugins.nvim-httpyac|
  - lspdocs                                           |myplugins.nvim-lspdocs|
  - lspecho                                           |myplugins.nvim-lspecho|
  - lspsignature                                 |myplugins.nvim-lspsignature|
  - rooter                                             |myplugins.nvim-rooter|
  - session                                           |myplugins.nvim-session|
  - undotree                                         |myplugins.nvim-undotree|
  - wiki                                                 |myplugins.nvim-wiki|
  - zoom                                                 |myplugins.nvim-zoom|
lsp# myplugins.nvim

A collection of plugins that were at some point sitting in my dotfiles.


USAGE                                                   *myplugins.nvim-usage*

>lua
    require('myplugins').setup {
        bigfile = {},
        bufcomplete = {},
        lspecho = {},
        lspsignature = {},
        zoom = {}
        -- Etc etc, format is <plugin_name> = { <plugin_configuration> }
    }
<


BIGFILE                                               *myplugins.nvim-bigfile*

Automatically disable stuff for large files


DEFAULT CONFIG ~

>lua
    {
        max_size = 1024 * 1024,
    }
<


BOOKMARKS                                           *myplugins.nvim-bookmarks*

Bookmark files using native marks.


USAGE ~

>lua
    local bookmarks = require('myplugins.bookmarks')
    vim.keymap.set('n', '<leader>mm', bookmarks.select, { desc = 'Bookmarks Select' })
    vim.keymap.set('n', '<leader>mq', bookmarks.quickfix, { desc = 'Bookmarks Quickfix' })
    vim.keymap.set('n', '<leader>md', bookmarks.delete_buffer, { desc = 'Bookmarks Delete Buffer' })
    vim.keymap.set('n', '<leader>mD', bookmarks.delete_all, { desc = 'Bookmarks Delete All' })
    vim.keymap.set('n', "'", function()
        bookmarks.jump_to_mark(vim.fn.getcharstr())
    end, { desc = 'Bookmarks Jump to Mark' })
    vim.keymap.set('n', 'm', function()
        bookmarks.toggle_mark(vim.fn.getcharstr())
    end, { desc = 'Bookmarks Toggle Mark' })
<


BUFCOMPLETE                                       *myplugins.nvim-bufcomplete*

LSP + treesitter autocompletion


  [!WARNING] Requires neovim 0.11.0+

DEFAULT CONFIG ~

>lua
    {
        entry_mapper = nil, -- Custom completion entry mapper
        debounce_delay = 100,
    }
<


USAGE ~

For best completion experience:

>lua
    vim.o.completeopt = 'menuone,noselect,noinsert,popup'
<

And you also ideally want to set the capabilities so Neovim will fetch
documentation when resolving completion items:

>lua
    -- Here we grab default Neovim capabilities and extend them with ones we want on top
    local capabilities = vim.tbl_deep_extend('force', 
        vim.lsp.protocol.make_client_capabilities(), 
        require('autocomplete.capabilities')
    )
    
    -- Now set capabilities on your LSP servers
    require('lspconfig')['<YOUR_LSP_SERVER>'].setup {
        capabilities = capabilities
    }
<


CMDCOMPLETE                                       *myplugins.nvim-cmdcomplete*

Command-line autocompletion


  [!WARNING] Requires neovim 0.11.0+

DIAGNOSTICS                                       *myplugins.nvim-diagnostics*

Automatically disable `DiagnosticUnnecessary` highlighting for code under
cursor.


DIFFTOOL                                             *myplugins.nvim-difftool*

`DiffTool <left> <right>` command for integration with `git difftool` and `git
difftool --dir-diff`.


DEFAULT CONFIG ~

>lua
    {
        rename = {
            detect = true, -- whether to detect renames, can be slow on large directories so disable if needed
            similarity = 0.5, -- minimum similarity for rename detection
            max_size = 1024 * 1024, -- maximum file size for rename detection
        },
        highlight = {
            A = 'DiffAdd', -- Added
            D = 'DiffDelete', -- Deleted
            M = 'DiffText', -- Modified
            R = 'DiffChange', -- Renamed
        },
    }
<


USAGE ~

Add this to your `gitconfig`:

>ini
    [diff]
        tool = nvim_difftool
    
    [difftool "nvim_difftool"]
        cmd = nvim -c \"DiffTool $LOCAL $REMOTE\"
<


HTTPYAC                                               *myplugins.nvim-httpyac*

Simple plugin for running http files using <httpyac>


USAGE ~

>lua
    local http = require('myplugins.httpyac')
    vim.keymap.set('n', '<leader>ho', http.toggle)
    vim.keymap.set('n', '<leader>hh', http.run)
    vim.keymap.set('n', '<leader>hH', http.run_all)
    vim.keymap.set('n', '<leader>he', http.select_env)
<


LSPDOCS                                               *myplugins.nvim-lspdocs*

Automatically show LSP documentation on completion item hover.


DEFAULT CONFIG ~

>lua
    {
        debounce_delay = 100,
    }
<


LSPECHO                                               *myplugins.nvim-lspecho*

Echo LSP progress to cmdline


DEFAULT CONFIG ~

>lua
    {
        echo = true, -- Echo progress messages, if set to false you can use .message() to get the current message
        decay = 3000, -- Message decay time in milliseconds
        interval = 100, -- Minimum time between echo updates in milliseconds
        attach_log = false, -- Attach to logMessage and showMessage
    }
<


LSPSIGNATURE                                     *myplugins.nvim-lspsignature*

Automatically show LSP function signature on cursor hover in insert mode.


DEFAULT CONFIG ~

>lua
    {
        debounce_delay = 100,
    }
<


ROOTER                                                 *myplugins.nvim-rooter*

Automatically changes working directory to project root.


DEFAULT CONFIG ~

>lua
    {
        dirs = {
            -- version control markers
            '.git/',
            '_darcs/',
            '.hg/',
            '.bzr/',
            '.svn/',
            -- exrc markers
            '.nvim.lua',
            '.nvimrc',
            '.exrc',
            -- generic root markers
            '.editorconfig',
            'Makefile',
            -- javascript
            'node_modules/',
            'package.json',
            -- python
            '.venv/',
            'pyproject.toml',
            '.pylintrc',
            'requirements.txt',
            'setup.py',
            -- c
            'CMakeLists.txt',
            -- rust
            'Cargo.toml',
            -- go
            'go.mod',
            -- java
            'mvnw',
            'gradlew',
        },
    }
<


SESSION                                               *myplugins.nvim-session*

Automatically saves and restores session in predefined folders (default ~/git)


DEFAULT CONFIG ~

>lua
    {
        session_dir = vim.fn.stdpath('data') .. '/sessions/',
        -- Directories where sessions are automatically saved
        dirs = {
            vim.fn.expand('~/git'),
        },
        -- Extra data to manage that is not normally saved in sessions
        extra = {
            quickfix = true, -- Save/load also quickfix lists
        }
    }
<


UNDOTREE                                             *myplugins.nvim-undotree*

Undo tree visualization for `fzf-lua`.


USAGE ~

>lua
    vim.keymap.set('n', '<leader>fu', require('myplugins.undotree').show)
<


WIKI                                                     *myplugins.nvim-wiki*

Simple wiki/note-taking functionality using `fzf-lua`.


DEFAULT CONFIG ~

>lua
    {
        dir = vim.fn.expand('~/vimwiki'),
    }
<


USAGE ~

>lua
    local wiki = require('myplugins.wiki')
    vim.keymap.set('n', '<leader>wt', wiki.today)
    vim.keymap.set('n', '<leader>wd', wiki.list_diary)
    vim.keymap.set('n', '<leader>ww', wiki.list_wiki)
    vim.keymap.set('n', '<leader>wn', wiki.new)
<


ZOOM                                                     *myplugins.nvim-zoom*

Zoom in/out on the current window.


USAGE ~

>lua
    local zoom = require('myplugins.zoom')
    vim.keymap.set('n', '<leader>z', zoom.toggle)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
